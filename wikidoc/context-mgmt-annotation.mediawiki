<p>These annotations are intented to be used on participant classes (implementing jPos TransactionParticipant or GroupSelector interfaces). In a few words, these annotations are a way to explicitly specify which context attributes a participant may update while being processed.</p>

=Using annotations in participant : typical usage=

<u>Sample participant class ''CheckRequiredFields'' :</u>
<pre>
package fr.dgrandemange.demoapp.participant;

import fr.dgrandemange.ctxmgmt.annotation.UpdateContextRule;
import fr.dgrandemange.ctxmgmt.annotation.UpdateContextRules;
import fr.dgrandemange.demoapp.ICtxAttr;

@UpdateContextRules({
		@UpdateContextRule(attrNames = ICtxAttr.REQUIREDFLD_ATTR0),
		@UpdateContextRule(id = CheckRequiredFields.TRANSITION__CHECKED_OK, attrNames = {ICtxAttr.REQUIREDFLD_ATTR1, ICtxAttr.REQUIREDFLD_ATTR2, ICtxAttr.REQUIREDFLD_ATTR3 }),
		@UpdateContextRule(id = CheckRequiredFields.TRANSITION__CHECKED_KO, attrNames = {ICtxAttr.REQUIREDFLD_ATTR4, ICtxAttr.REQUIREDFLD_ATTR5 }) })
public class CheckRequiredFields extends AbstractGroupSelectorParticipant {

	public static final String TRANSITION__CHECKED_KO = "nok";
	public static final String TRANSITION__CHECKED_OK = "ok";

	/*
	 * (non-Javadoc)
	 * 
	 * @see fr.dgrandemange.demoapp.participant.AbstractGroupSelectorParticipant#prepare(long)
	 */
	public int prepare(long id) {

		// always add attribute REQUIREDFLD_ATTR0 to context
		ctxPutForId(UpdateContextRule.DEFAULT_ID, "value0");

		// NB : method ctxPutForId() should be inherited from parent class
		// AbstractGroupSelectorParticipant
		// and knows how to update current transaction context using current
		// class @UpdateContextRules annotation

		return PREPARED | NO_JOIN;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see fr.dgrandemange.demoapp.participant.AbstractGroupSelectorParticipant#select(long)
	 */
	public String select(long id) {
		String transitionId;
		boolean checked = false;
		// do checks here ...

		if (checked) {
			// Fields checked
			transitionId = TRANSITION__CHECKED_OK;

			// Update context according to @UpdateContextRule of id
			// 'CHECKED_OK', passing respective attribute values as arguments
			ctxPutForId(transitionId, "attr1value", "attr2value", "attr3value");
		} else {
			transitionId = TRANSITION__CHECKED_KO;

			// Update context according to @UpdateContextRule of id
			// 'CHECKED_KO', passing respective attribute values as arguments
			ctxPutForId(transitionId, "attr4value", "attr5value");
		}

		// Looking in current participant configuration for next
		// participants/groups
		return getConfig().get(transitionId);
	}

}
</pre>
Note : context attribute names are externalized in a dedicated interface ''ICtxAttr''.

<u>Interface ''ICtxAttr'' :</u>
<pre>
package fr.dgrandemange.demoapp;

public interface ICtxAttr {
	
	public static final String REQUIREDFLD_ATTR0 = "requiredfld.attr0";
	public static final String REQUIREDFLD_ATTR1 = "requiredfld.attr1";
	public static final String REQUIREDFLD_ATTR2 = "requiredfld.attr2";
	public static final String REQUIREDFLD_ATTR3 = "requiredfld.attr3";
	public static final String REQUIREDFLD_ATTR4 = "requiredfld.attr4";
	public static final String REQUIREDFLD_ATTR5 = "requiredfld.attr5";
	
	public static final String CURRENCY_ATTR0 = "currency.attr0";
	public static final String CURRENCY_ATTR1 = "currency.attr1";
	public static final String CURRENCY_ATTR2 = "currency.attr2";
	public static final String CURRENCY_ATTR3 = "currency.attr3";
	public static final String CURRENCY_ATTR4 = "currency.attr4";
	public static final String CURRENCY_ATTR5 = "currency.attr5";
}
</pre>

The sample participant above is of type GroupSelector ant its context management annotations specifie that :
# participant processing should always end with and attribute <code>ICtxAttr.REQUIREDFLD_ATTR0</code> added to the context,
# in case check is ok <code>id = CheckRequiredFields.TRANSITION__CHECKED_OK</code>, participant processing should add attributes <code>ICtxAttr.REQUIREDFLD_ATTR1, ICtxAttr.REQUIREDFLD_ATTR2, ICtxAttr.REQUIREDFLD_ATTR3</code> to the context,
# in case check is ko <code>id = CheckRequiredFields.TRANSITION__CHECKED_KO</code>, participant processing should add attributes <code>ICtxAttr.REQUIREDFLD_ATTR1, ICtxAttr.REQUIREDFLD_ATTR2, ICtxAttr.REQUIREDFLD_ATTR3</code> to the context, 

=Using context management annotations to enforce design rules=
<p>Well it's only about annotations, and it does not ensure at all that the developper effectively update the context accordingly to the rules wrapped in these annotations. As is, these are merely specifications, nothing more.</p>

<p>Therefore, it may be a good idea to let the participant delegate the context management to a service or something that relies on the context management annotations (through reflection for example) to do this job, and restrict direct access to the transaction context object from the participant's methods.</p>

<p>In the sample participant above, we have chosen to make it inherit an abstract class AbstractGroupSelectorParticipant that cares about this concern. The ''prepare()'' and ''select()'' methods don't provide the transaction context anymore. A single method <code>void ctxPutForId(String transitionId, Object...attributesValues)</code> is available to update the context. But you may do this in your own way.</p>

<p>More over, having a dedicated annotation processor that makes some various consistency checks at compilation time may also be a good choice.</p>